package hr.fer.zemris.java.hw07.demo2;

import java.util.Iterator;
import java.util.NoSuchElementException;

/**
 * Simulates a collection of consecutive prime numbers. Allows iteration through
 * the collection.
 * 
 * @author Luka Mesaric
 */
public class PrimesCollection implements Iterable<Integer> {

	/**
	 * Number of primes "stored" in this collection.
	 */
	private final int numberOfPrimes;

	/**
	 * Default constructor.
	 *
	 * @param  numberOfPrimes           number of consecutive primes to "store" in
	 *                                  this collection
	 * @throws IllegalArgumentException if <code>numberOfPrimes</code> is negative
	 */
	public PrimesCollection(int numberOfPrimes) {
		if (numberOfPrimes < 0) {
			throw new IllegalArgumentException("numberOfPrimes must not be negative.");
		}
		this.numberOfPrimes = numberOfPrimes;
	}

	/**
	 * Tests if given <code>number</code> is a prime. Completes in linear time.
	 * 
	 * @param  number number to test
	 * @return        <code>true</code> if <code>number</code> is a prime,
	 *                <code>false</code> otherwise
	 */
	private static boolean isPrime(int number) {
		if (number < 2) {
			// fail fast for negative numbers, 0, and 1
			return false;
		} else if (number == 2) {
			// special case of an even prime
			return true;
		} else if ((number & 0x1) == 0) {
			// number is even (but is not 2)
			return false;
		}

		for (int i = 3, sqrt = (int) Math.sqrt(number); i <= sqrt; i += 2) {
			if (number % i == 0) {
				return false;
			}
		}
		return true;
	}

	/**
	 * Returns an iterator over primes stored in this collection.
	 *
	 * @return an Iterator.
	 */
	@Override
	public Iterator<Integer> iterator() {
		return new PrimeIterator();
	}

	/**
	 * Implementation of a iterator over a collection of primes.<br>
	 * Creates elements on the fly.
	 * 
	 * @author Luka Mesaric
	 */
	private class PrimeIterator implements Iterator<Integer> {

		/**
		 * Number of primes generated by this iterator until this point in time.
		 */
		private int generatedPrimes = 0;

		/**
		 * Last prime generated by this iterator.
		 */
		private int lastGeneratedPrime = -1;

		@Override
		public boolean hasNext() {
			return generatedPrimes < numberOfPrimes;
		}

		/**
		 * @throws NoSuchElementException {@inheritDoc}
		 */
		@Override
		public Integer next() {
			if (!hasNext()) {
				throw new NoSuchElementException("All primes have been used up.");
			}

			while (!isPrime(++lastGeneratedPrime));
			generatedPrimes++;
			return lastGeneratedPrime;
		}

	}

}
